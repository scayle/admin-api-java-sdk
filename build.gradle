plugins {
    id 'java-library'
    // id 'maven' // REMOVED: This plugin is deprecated and replaced by 'maven-publish'
    id 'signing'
    id 'maven-publish'
}

repositories {
    jcenter() // Note: JCenter is deprecated, consider replacing with mavenCentral() or other public repositories
    mavenCentral()
}

def getNexusUsername() {
    return hasProperty("nexusUsername") ? findProperty("nexusUsername") : ""
}

def getNexusPassword() {
    return hasProperty("nexusPassword") ? findProperty("nexusPassword") : ""
}

def isRelease() {
    findProperty("environment") == "release"
}

def resolveVersion() {
    return findProperty("version") + (isRelease() ? "" : "-SNAPSHOT")
}

group = 'com.scayle.adminapi'
version = resolveVersion()
sourceCompatibility = 1.8
targetCompatibility = 1.8

dependencies {
    // Using 'implementation' for compile-time and runtime dependencies
    implementation 'com.google.guava:guava:32.0.1-jre'
    implementation 'com.google.code.gson:gson:2.10.1'
    implementation 'com.squareup.okhttp3:okhttp:4.10.0' // Moved from 'compile'

    testImplementation 'junit:junit:4.13.2'
    testImplementation 'net.javacrumbs.json-unit:json-unit-assertj:2.36.1'
    testImplementation 'com.squareup.moshi:moshi:1.14.0'

    // Lombok configuration
    compileOnly 'org.projectlombok:lombok:1.18.24'
    annotationProcessor 'org.projectlombok:lombok:1.18.24'
    testCompileOnly 'org.projectlombok:lombok:1.18.24'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.24'
}

// Task to create the Javadoc JAR (required by Maven Central)
task javadocJar(type: Jar) {
    classifier = 'javadoc'
    from javadoc
}

// Task to create the Sources JAR (required by Maven Central)
task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

// custom fatJar task
task fatJar(type: Jar) {
    archiveClassifier = "all"
    from {
        // Use 'configurations.runtimeClasspath' for all runtime dependencies
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
    with jar
}

// Artifacts block is often not strictly needed with maven-publish if you use components.java
// However, if you explicitly want to attach these to the 'archives' configuration, it's fine.
// The maven-publish plugin's 'from components.java' will pick up sources and javadoc jars
// if they are properly configured as Java components.
artifacts {
    archives javadocJar, sourcesJar
    // If you want to publish the fatJar as an additional artifact:
    // archives fatJar
}

// ********** NEW SIGNING CONFIGURATION **********
signing {
    // GPG key details.
    def signingKeyId = findProperty("signingKeyId")
    def signingKey = findProperty("signingKey")
    def signingPassword = findProperty("signingPassword")

    // Use in-memory keys for security, reading from properties/env vars
    useInMemoryPgpKeys(signingKeyId, signingKey, signingPassword)

    // Sign the specific publication defined above.
    // This replaces 'sign configurations.archives' and automatically signs the POM.
    sign publishing.publications.mavenJava
}

// ********** NEW PUBLISHING CONFIGURATION **********
publishing {
    publications {
        // Define your Maven publication. 'mavenJava' is a common name.
        create("mavenJava", MavenPublication) { // This creates a publication named "mavenJava" of type MavenPublication
            // This line tells Gradle to include the main JAR, sources JAR,
            // javadoc JAR, and the generated POM for this publication.
            from components.java

            // Define the POM metadata. This replaces the pom.project block from uploadArchives.
            pom {
                name = 'SCAYLE AdminAPI SDK'
                packaging = 'jar' // Ensure packaging is set
                description = 'SCAYLE AdminAPI SDK'
                url = 'https://scayle.dev/en/developer-guide/introduction/apis#admin-api'

                scm {
                    connection = 'scm:git:git@github.com:scayle/admin-api-java-sdk.git'
                    developerConnection = 'scm:git:git@github.com:scayle/admin-api-java-sdk.git'
                    url = 'https://github.com/scayle/admin-api-java-sdk'
                }

                licenses {
                    license {
                        name = 'The MIT License'
                        url = 'https://opensource.org/licenses/MIT'
                    }
                }

                developers {
                    developer {
                        id = 'SCAYLE'
                        name = 'SCAYLE Support'
                        email = 'support@scayle.com'
                    }
                }
            }

            // If you want to include the fatJar as an additional artifact in this publication:
            // artifact(fatJar)
        }
    }

    repositories {
        maven {
            // This name is internal to your Gradle build script.
            // It's used when you run tasks like 'publishMavenJavaPublicationToSonatypeCentralRepository'.
            name = "sonatypeCentral"

            // The URL for the new Sonatype Central Portal Staging API.
            // The 'maven-publish' plugin intelligently handles release vs. snapshot
            // based on your project.version.
            url = uri("https://ossrh-staging-api.central.sonatype.com/service/local/staging/deploy/maven2/")

            // Authentication using your helper methods.
            // These should provide your Sonatype Central Portal API Tokens.
            credentials {
                username = getNexusUsername()
                password = getNexusPassword()
            }
        }
    }
}
