plugins {
    id 'java-library'
    id 'signing'
    id 'maven-publish'
}

repositories {
    mavenCentral()
}

def isRelease() {
    findProperty("environment") == "release"
}

def resolveVersion() {
    return findProperty("version") + (isRelease() ? "" : "-SNAPSHOT")
}

group = 'com.scayle.adminapi'
version = resolveVersion()

sourceCompatibility = 1.8
targetCompatibility = 1.8

dependencies {
    implementation 'com.google.guava:guava:32.0.1-jre'
    implementation 'com.google.code.gson:gson:2.10.1'
    implementation 'com.squareup.okhttp3:okhttp:4.10.0'

    testImplementation 'junit:junit:4.13.2'
    testImplementation 'net.javacrumbs.json-unit:json-unit-assertj:2.36.1'
    testImplementation 'com.squareup.moshi:moshi:1.14.0'

    compileOnly 'org.projectlombok:lombok:1.18.24'
    annotationProcessor 'org.projectlombok:lombok:1.18.24'
    testCompileOnly 'org.projectlombok:lombok:1.18.24'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.24'
}

java {
    withSourcesJar()
    withJavadocJar()
}

publishing {
    publications {
        create("mavenJava", MavenPublication) {
            from components.java

            pom {
                name = 'SCAYLE AdminAPI SDK'
                packaging = 'jar'
                description = 'SCAYLE AdminAPI SDK'
                url = 'https://scayle.dev/en/developer-guide/introduction/apis#admin-api'

                scm {
                    connection = 'scm:git:git@github.com:scayle/admin-api-java-sdk.git'
                    developerConnection = 'scm:git:git@github.com:scayle/admin-api-java-sdk.git'
                    url = 'https://github.com/scayle/admin-api-java-sdk'
                }

                licenses {
                    license {
                        name = 'The MIT License'
                        url = 'https://opensource.org/licenses/MIT'
                    }
                }

                developers {
                    developer {
                        id = 'SCAYLE'
                        name = 'SCAYLE Support'
                        email = 'support@scayle.com'
                    }
                }
            }
        }
    }
}

signing {
    // GPG key details.
    def signingKeyId = findProperty("signingKeyId")
    def signingKey = findProperty("signingKey")
    def signingPassword = findProperty("signingPassword")

    useInMemoryPgpKeys(signingKeyId, signingKey, signingPassword)
    sign publishing.publications.mavenJava
}

tasks.register('stageFinalMavenArtifacts', Copy) {
    def gavPath = "${project.group.replace('.', '/')}/${project.name}/${project.version}"
    def targetDirectory = layout.buildDirectory.dir("final-maven-staging/${gavPath}").get().asFile

    into(targetDirectory)

    // Dependencies to ensure all source artifacts are built and signed
    dependsOn tasks.named('jar')
    dependsOn tasks.named('sourcesJar')
    dependsOn tasks.named('javadocJar')
    dependsOn tasks.named('generatePomFileForMavenJavaPublication')
    dependsOn tasks.named('generateMetadataFileForMavenJavaPublication') // Ensure module.json is made
    dependsOn tasks.named('signMavenJavaPublication') // Ensure signed files are produced

    from(tasks.named('jar').get().archiveFile)
    from(tasks.named('jar').get().archiveFile.map { it.asFile.absolutePath + ".asc" })

    from(tasks.named('sourcesJar').get().archiveFile)
    from(tasks.named('sourcesJar').get().archiveFile.map { it.asFile.absolutePath + ".asc" })

    from(tasks.named('javadocJar').get().archiveFile)
    from(tasks.named('javadocJar').get().archiveFile.map { it.asFile.absolutePath + ".asc" })

    from(file("${buildDir}/publications/mavenJava/pom-default.xml")) {
        rename { fileName -> "${project.name}-${project.version}.pom" }
    }
    from(file("${buildDir}/publications/mavenJava/pom-default.xml.asc")) {
        rename { fileName -> "${project.name}-${project.version}.pom.asc" }
    }

    doLast {
        println "\n--- Generating MD5/SHA1 checksums ---"
        if (targetDirectory.exists()) {
            targetDirectory.eachFileRecurse { file ->
                // Only generate checksums for actual artifacts, not signatures or existing checksums
                if (file.isFile() && !file.name.endsWith(".asc") && !file.name.endsWith(".md5") && !file.name.endsWith(".sha1")) {
                    def fileBytes = file.bytes
                    // MD5 Checksum
                    def md5 = java.security.MessageDigest.getInstance("MD5").digest(fileBytes).encodeHex().toString()
                    new File(file.parentFile, file.name + ".md5").text = md5
                    // SHA1 Checksum
                    def sha1 = java.security.MessageDigest.getInstance("SHA1").digest(fileBytes).encodeHex().toString()
                    new File(file.parentFile, file.name + ".sha1").text = sha1
                    println "  Generated checksums for: ${file.name}"
                }
            }
        }
        println "-------------------------------------------\n"
    }
}

tasks.register('zipPublicationBundle', Zip) {
    dependsOn tasks.named('stageFinalMavenArtifacts')

    archiveFileName = "${project.name}-${project.version}-bundle.zip"
    destinationDirectory = layout.buildDirectory.dir("publisher-bundles")

    from(layout.buildDirectory.dir("final-maven-staging").get().asFile) {
    }
}

task fatJar(type: Jar) {
    archiveClassifier = "all"
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
    with jar
}